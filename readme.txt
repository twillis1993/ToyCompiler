# General structure

We adapt the abstract syntax tree (AST) data structure presented by Levine in 'Flex and Bison' to manage the semantics of our language. We omit the symbol table data structure used in that text and instead manage our variables with a simple array as discussed below. 

We traverse the AST in a depth-first manner in order to evaluate the program.

The code for this data structure, including the functions needed to evaluate it and generate C code, is provided in `ast.c` and `ast.h`.

# Variables

We only allow an integer type. We manage variables with a fixed-length global array, `symbolArray`. Each variable is of the form `v[0-9]`. We use the value of the digit component as an index into `symbolArray`. We initialise the values of the variables to 0 so that we do not need to handle initialisation in our programming language.

# Code generation

We traverse the AST from the head node and call `generateCode` for each node. The result is printed to an output file, `cCode.c`.

# Building and running the code

The compiler can be built with:

	make basicWhile

It can be tested on the source program containing an implementation of Euclid's algorithm, `euclidTest.txt`, as follows:

	./basicWhile < euclidTest.txt

This program will write out the result of evaluating the program to `stdout`.

Different input values can be specified by changing the value assigned to the variables `v1` and `v2` at the head of `euclidTest.txt`. The code generated by the compiler is written out to `cCode.c`.
